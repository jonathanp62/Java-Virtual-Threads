/*
 * This file was generated by the Gradle 'init' task.
 *
 * (#)build.gradle  0.1.0   03/15/2024
 *
 * @author   Jonathan Parker
 * @version  0.1.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'application'
    id 'java'
    id 'maven-publish'
}

apply plugin : 'java'

ext {
    javaMainClass = 'net.jmp.demo.virtual.threads.Main'
}

application {
    mainClass.set(javaMainClass)
}

repositories {
    mavenLocal()
    maven {
        url = uri('http://localhost:8081/nexus/content/repositories/releases')

        allowInsecureProtocol = true
    }

    maven {
        url = uri('http://maven.repository.redhat.com/techpreview/all')

        allowInsecureProtocol = true
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation libs.ch.qos.logback.logback.classic
    implementation libs.ch.qos.logback.logback.core
    implementation libs.org.slf4j.slf4j.api
    implementation libs.org.slf4j.slf4j.ext

    testImplementation libs.junit.junit
}

group = 'net.jmp.demo.virtual.threads'
version = '0.1.0'
description = 'A Virtual Threads Demonstration'

java.sourceCompatibility = JavaVersion.VERSION_20

java {
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

/*
 * Execute with - gradle execProgram instead of gradle run
 */

task execProgram(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = javaMainClass
    allJvmArgs = ['-ea', '-Dlogback.configurationFile=config/logback.xml']
}
